NW.parts <- strsplit(vecNW[i], '_')[[1]]
overlaps <- 0
for (part in GS.parts) {
if (part %in% loose.map$GS) {
acceptable.NW <- subset(loose.map, GS == part)$NW
overlaps <- overlaps + ifelse(sum(acceptable.NW %in% NW.parts) > 0, 1, 0)
}
}
matches[i] <- ifelse(overlaps > 0, 1, 0)
}
return(partial.ovlp)
}
runApp()
runApp()
nw.filename <- "VanDamFJ11-GS_Training_Round_5-TS.txt"
minute <- 5
# Input files
nw.file <- read.annot(nw.filename)
nw.file$code[which(is.na(nw.file$code))] <- "<empty>"
gs.file <- read.annot(paste0(recording, "-0GS0.txt"))
ntvness <- ifelse(native == "Yes", "native", "NON-native")
# Input arguments
slice_sz <- 50 # size of time slices compared
strict <- ifelse(evaltype == "Normal", 1, 0)
if (strict == 1) {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard.")
} else {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard using LAST-CHANCE mode.")
}
coder.stmt <- paste0("Submitted by coder ", coder, " from the ", lab,
" lab, who is a ", ntvness,
" speaker of the language in the recording.")
# Currently set up so we could have different score minima for
# normal vs. last-chance mode and their use with native vs. non-native
# coders
if (strict == 1) {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
} else {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
}
seg_stt <- (minute-1)*60000
seg_end <- minute*60000
strict
# Collapse MA tiers, FA tiers, and all C tiers except CHI (lena-like):
gs.file.lna <- collapse.tiers.lena(gs.file, seg_stt, seg_end)
nw.file.lna <- collapse.tiers.lena(nw.file, seg_stt, seg_end)
# Run the normal tier comparison, but allowing for partial matches
gs.speakers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.speakers <- nw.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.orig.speakers <- nw.file %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
# Create output tables
# Tier equivalence
tier.equiv <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
# Score summary
gs.tiers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & (!is.na(speaker))) %>%
select(tier, speaker) %>% distinct() %>% arrange(speaker) %>%
mutate(slice_match = "", n_annots = "", sec_annots = "",
slice_match_n = 0, nsec_spch = 0)
# Errors
errors.tbl <- tibble()
# CHI is always matched with CHI
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == "CHI")] <- "CHI"
# The others are matched to their collapsed original tiers
nonchi.tiers <- c("FA1", "MA1", "UC1")
nonchi.ptns <- c('^FA', '^MA', '^[MFU]C')
for (j in 1:length(nonchi.tiers)) {
if (nonchi.tiers[j] %in% tier.equiv$gs.spkr) {
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == nonchi.tiers[j])] <-
paste(nw.orig.speakers$speaker[which(grepl(nonchi.ptns[j], nw.orig.speakers$speaker))], collapse = " and ")
}
}
tier.equiv$your.spkr[which(tier.equiv$your.spkr == "")] <- "<no match>"
tier.equiv
gs.tiers
for (tiertype in gs.tiers$tier) {
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers$tier == tiertype)
if (tier.equiv$your.spkr[which(
tier.equiv$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <- "MISSING"
gs.tiers$sec_annots[gs.row] <- "MISSING"
}
gs.tiers$slice_match[gs.row] <- "0%"
gs.tiers$slice_match_n[gs.row] <- 0
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers.multi(gs.file.lna, nw.file.lna, tiertype,
seg_stt, seg_end, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers$slice_match[gs.row] <- "100%"
gs.tiers$slice_match_n[gs.row] <- 1
gs.tiers$n_annots[gs.row] <- "No non-'U' utts"
} else {
gs.tiers$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl <- bind_rows(errors.tbl,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
}
}
gs.tiers
View(gs.tiers)
tiertype <- gs.tiers$tier[2]
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers$tier == tiertype)
tier.equiv$your.spkr[which(
tier.equiv$gs.spkr == tierspkr)] == "<no match>"
# Fill in n_annots and sec_annots values
segA <- gs.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
!(grepl("@", tiertype))
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
comparison.tbl <- intersect.tiers.multi(gs.file.lna, nw.file.lna, tiertype,
seg_stt, seg_end, slice_sz)
View(comparison.tbl)
subset(comparison.tbl, match == 0)
View(subset(comparison.tbl, match == 0))
tiertype <- "mwu@CHI"
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers$tier == tiertype)
tier.equiv$your.spkr[which(
tier.equiv$gs.spkr == tierspkr)] == "<no match>"
gs.row
segA <- gs.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers.multi(gs.file.lna, nw.file.lna, tiertype,
seg_stt, seg_end, slice_sz)
View(subset(comparison.tbl, match == 0))
minute
minute <- 4
nw.file <- read.annot(nw.filename)
nw.file$code[which(is.na(nw.file$code))] <- "<empty>"
gs.file <- read.annot(paste0(recording, "-0GS0.txt"))
ntvness <- ifelse(native == "Yes", "native", "NON-native")
# Input arguments
slice_sz <- 50 # size of time slices compared
strict <- ifelse(evaltype == "Normal", 1, 0)
if (strict == 1) {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard.")
} else {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard using LAST-CHANCE mode.")
}
coder.stmt <- paste0("Submitted by coder ", coder, " from the ", lab,
" lab, who is a ", ntvness,
" speaker of the language in the recording.")
# Currently set up so we could have different score minima for
# normal vs. last-chance mode and their use with native vs. non-native
# coders
if (strict == 1) {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
} else {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
}
# if minute is NA then the whole file is compared
seg_stt <- (minute-1)*60000
seg_end <- minute*60000
if (strict == 0) {
# Collapse MA tiers, FA tiers, and all C tiers except CHI (lena-like):
gs.file.lna <- collapse.tiers.lena(gs.file, seg_stt, seg_end)
nw.file.lna <- collapse.tiers.lena(nw.file, seg_stt, seg_end)
# Run the normal tier comparison, but allowing for partial matches
gs.speakers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.speakers <- nw.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.orig.speakers <- nw.file %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
# Create output tables
# Tier equivalence
tier.equiv <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
# Score summary
gs.tiers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & (!is.na(speaker))) %>%
select(tier, speaker) %>% distinct() %>% arrange(speaker) %>%
mutate(slice_match = "", n_annots = "", sec_annots = "",
slice_match_n = 0, nsec_spch = 0)
# Errors
errors.tbl <- tibble()
# CHI is always matched with CHI
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == "CHI")] <- "CHI"
# The others are matched to their collapsed original tiers
nonchi.tiers <- c("FA1", "MA1", "UC1")
nonchi.ptns <- c('^FA', '^MA', '^[MFU]C')
for (j in 1:length(nonchi.tiers)) {
if (nonchi.tiers[j] %in% tier.equiv$gs.spkr) {
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == nonchi.tiers[j])] <-
paste(nw.orig.speakers$speaker[which(grepl(nonchi.ptns[j], nw.orig.speakers$speaker))], collapse = " and ")
}
}
tier.equiv$your.spkr[which(tier.equiv$your.spkr == "")] <- "<no match>"
# Fill in report values
for (tiertype in gs.tiers$tier) {
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers$tier == tiertype)
if (tier.equiv$your.spkr[which(
tier.equiv$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <- "MISSING"
gs.tiers$sec_annots[gs.row] <- "MISSING"
}
gs.tiers$slice_match[gs.row] <- "0%"
gs.tiers$slice_match_n[gs.row] <- 0
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers.multi(gs.file.lna, nw.file.lna, tiertype,
seg_stt, seg_end, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers$slice_match[gs.row] <- "100%"
gs.tiers$slice_match_n[gs.row] <- 1
gs.tiers$n_annots[gs.row] <- "No non-'U' utts"
} else {
gs.tiers$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl <- bind_rows(errors.tbl,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
}
}
}
View(errors.tbl)
View(subset(errors.tbl, tier == "lex@CHI"))
View(subset(errors.tbl, tier == "mwu@CHI"))
gs.tiers
runApp()
nw.filename <- "VanDamFJ11-GS_Training_Round_1-TS.txt"
nw.filename <- "VanDamFJ11-GS_Training_Round_1-TS.txt"
minute <- 1
evaltype <- "Last-chance"
# Input files
nw.file <- read.annot(nw.filename)
nw.file$code[which(is.na(nw.file$code))] <- "<empty>"
gs.file <- read.annot(paste0(recording, "-0GS0.txt"))
ntvness <- ifelse(native == "Yes", "native", "NON-native")
# Input arguments
slice_sz <- 50 # size of time slices compared
strict <- ifelse(evaltype == "Normal", 1, 0)
if (strict == 1) {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard.")
} else {
compare.stmt <- paste0("Comparing minute ", minute, " of recording ",
recording, " to the gold standard using LAST-CHANCE mode.")
}
coder.stmt <- paste0("Submitted by coder ", coder, " from the ", lab,
" lab, who is a ", ntvness,
" speaker of the language in the recording.")
# Currently set up so we could have different score minima for
# normal vs. last-chance mode and their use with native vs. non-native
# coders
if (strict == 1) {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
} else {
min_overall_score <- 0.95 # minimum overall weighted score
min_score_univ <- 0.85 # minumum score allowed on diarization and vcm
if (native == "Yes") {
min_score_lgsp <- 0.85 # minumum score allowed on lex, mwu, and xds
} else {
min_score_lgsp <- 0.75 # minumum score allowed on lex, mwu, and xds
}
}
################################################################################
# Run comparison
################################################################################
# Determine the onset and offset times of the segment to be compared
# if minute is NA then the whole file is compared
seg_stt <- (minute-1)*60000
seg_end <- minute*60000
if (strict == 0) {
# Collapse MA tiers, FA tiers, and all C tiers except CHI (lena-like):
gs.file.lna <- collapse.tiers.lena(gs.file, seg_stt, seg_end)
nw.file.lna <- collapse.tiers.lena(nw.file, seg_stt, seg_end)
# Run the normal tier comparison, but allowing for partial matches
gs.speakers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.speakers <- nw.file.lna %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.orig.speakers <- nw.file %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
# Create output tables
# Tier equivalence
tier.equiv <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
# Score summary
gs.tiers <- gs.file.lna %>%
filter(stop > seg_stt & start < seg_end & (!is.na(speaker))) %>%
select(tier, speaker) %>% distinct() %>% arrange(speaker) %>%
mutate(slice_match = "", n_annots = "", sec_annots = "",
slice_match_n = 0, nsec_spch = 0)
# Errors
errors.tbl <- tibble()
# CHI is always matched with CHI
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == "CHI")] <- "CHI"
# The others are matched to their collapsed original tiers
nonchi.tiers <- c("FA1", "MA1", "UC1")
nonchi.ptns <- c('^FA', '^MA', '^[MFU]C')
for (j in 1:length(nonchi.tiers)) {
if (nonchi.tiers[j] %in% tier.equiv$gs.spkr) {
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == nonchi.tiers[j])] <-
paste(nw.orig.speakers$speaker[which(grepl(nonchi.ptns[j], nw.orig.speakers$speaker))], collapse = " and ")
}
}
tier.equiv$your.spkr[which(tier.equiv$your.spkr == "")] <- "<no match>"
# Fill in report values
for (tiertype in gs.tiers$tier) {
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers$tier == tiertype)
if (tier.equiv$your.spkr[which(
tier.equiv$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <- "MISSING"
gs.tiers$sec_annots[gs.row] <- "MISSING"
}
gs.tiers$slice_match[gs.row] <- "0%"
gs.tiers$slice_match_n[gs.row] <- 0
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.lna %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers.multi(gs.file.lna, nw.file.lna, tiertype,
seg_stt, seg_end, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers$slice_match[gs.row] <- "100%"
gs.tiers$slice_match_n[gs.row] <- 1
gs.tiers$n_annots[gs.row] <- "No non-'U' utts"
} else {
gs.tiers$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl <- bind_rows(errors.tbl,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
}
}
}
tier.equiv
gs.tiers
runApp()
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "U_U")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "U_U_U")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "U_U_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA__U_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA_U_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA_U_U_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "A")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "U")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA_U_A_NA")
grepl('^([U]|[NA])+(_([U]|[NA])+)*$', "NA_U_W_NA")
(grepl('^(U|NA)+(_(U|NA)+)*$', "U")
)
(grepl('^(U|NA)+(_(U|NA)+)*$', "U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "NA"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "NA_NA"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "NA_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "NU_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "A_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "U_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "U_U_NA_NA_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "U_U_NA_A_U"))
(grepl('^(U|NA)+(_(U|NA)+)*$', "A"))
runApp()
shiny::runApp()
