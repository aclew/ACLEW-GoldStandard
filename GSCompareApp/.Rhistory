tiers.w.spch <- tier.equiv[tier.equiv$gs.spkr %in% unique(gs.tiers$speaker),]
tiers.w.spch
gs.tiers$weight <- 0
gs.tiers$weight[which(gs.tiers$tier == "CHI")] <- 1
nonCHI.spch.rows <- which(!(grepl('@|CHI', gs.tiers$tier)))
gs.tiers$weight[nonCHI.spch.rows] <- round(gs.tiers$nsec_spch[nonCHI.spch.rows]/
sum(gs.tiers$nsec_spch[nonCHI.spch.rows]),2)
xds.rows <- which((grepl('xds@', gs.tiers$tier)))
gs.tiers$weight[xds.rows] <- gs.tiers$weight[xds.rows-1]
chi.dep.rows <- which((grepl('@CHI', gs.tiers$tier)))
gs.tiers$weight[chi.dep.rows] <- 1
# Clean up tier-based report
gs.tiers.print <- gs.tiers %>%
select(-speaker, -slice_match_n, -nsec_spch) %>%
mutate(slice_match = replace(slice_match, slice_match=="NaN%", "0%"))
View(gs.tiers)
# Sub-part scores
chi.diar <- ""
nch.diar <- ""
xds.acc <- ""
chi.dep.acc <- ""
vcm.acc <- ""
lex.acc <- ""
mwu.acc <- ""
if (nrow(filter(gs.tiers, tier == "CHI") > 0)) {
chi.score <- as.numeric(gs.tiers %>% filter(tier == "CHI") %>%
select(slice_match_n) %>%
replace_na(list(slice_match_n = 0)))
chi.diar <- paste("CHI diarization: ",round(chi.score*100, 2),"%", sep="")
} else {
chi.diar <- "CHI diarization: <nothing to evaluate>"
}
if (nrow(filter(gs.tiers, tier != "CHI")) > 0) {
non.chi.score <- as.numeric(gs.tiers %>%
filter(tier == speaker & tier != "CHI") %>%
replace_na(list(slice_match_n = 0)) %>%
mutate(wgtd.tier.score = slice_match_n * weight) %>%
summarise(sum(wgtd.tier.score)))
nch.diar <- paste("Non-CHI diarization: ", round(non.chi.score*100, 2),"%",
sep="")
} else {
nch.diar <- "Non-CHI diarization: <nothing to evaluate>"
}
if (sum(grepl('xds@', gs.tiers$tier)) > 0) {
xds.score <- as.numeric(gs.tiers %>%
filter(grepl('xds@', tier)) %>%
replace_na(list(slice_match_n = 0)) %>%
mutate(wgtd.tier.score = slice_match_n * weight) %>%
summarise(sum(wgtd.tier.score)))
xds.acc <- paste("Overall xds: ", round(xds.score*100, 2),"%", sep="")
} else {
xds.acc <- "Overall xds: <nothing to evaluate>"
}
if (sum(grepl('@CHI', gs.tiers$tier)) > 0) {
chi.dep.score <- as.numeric(gs.tiers %>%
filter(tier != speaker & speaker == "CHI") %>%
select(slice_match_n) %>%
summarise(mean(slice_match_n)))
chi.dep.acc <- paste0("CHI vcm/lex/mwu: ", round(chi.dep.score*100, 2), "%")
} else {
chi.dep.acc <- "CHI vcm/lex/mwu: <nothing to evaluate>"
}
if (sum(grepl('vcm@', gs.tiers$tier)) > 0) {
vcm.score <- as.numeric(gs.tiers %>%
filter(tier == "vcm@CHI") %>%
select(slice_match_n))
vcm.acc <- paste0("vcm: ", round(vcm.score*100, 2), "%")
} else {
vcm.acc <- "vcm: <nothing to evaluate>"
}
if (sum(grepl('lex@', gs.tiers$tier)) > 0) {
lex.score <- as.numeric(gs.tiers %>%
filter(tier == "lex@CHI") %>%
select(slice_match_n))
lex.acc <- paste0("lex: ", round(lex.score*100, 2), "%")
} else {
lex.acc <- "lex: <nothing to evaluate>"
}
if (sum(grepl('mwu@', gs.tiers$tier)) > 0) {
mwu.score <- as.numeric(gs.tiers %>%
filter(tier == "mwu@CHI") %>%
select(slice_match_n))
mwu.acc <- paste0("mwu: ", round(mwu.score*100, 2), "%")
} else {
mwu.acc <- "mwu: <nothing to evaluate>"
}
# Summary scores
summ.bad.tiers <- ""
summ.weighted.score <- ""
pass.message <- ""
subminscores.univ <- gs.tiers %>%
filter(tier == speaker | tier == "vcm@CHI") %>%
replace_na(list(slice_match_n = 0)) %>%
filter(slice_match_n < min_score_univ) %>%
select(tier)
if (native == "Yes") {
subminscores.lgsp <- gs.tiers %>%
filter(tier != speaker & tier != "vcm@CHI") %>%
replace_na(list(slice_match_n = 0)) %>%
filter(slice_match_n < min_score_lgsp) %>%
select(tier)
overall.score <- round((
(chi.score * 0.35) +
(non.chi.score * 0.35) +
(chi.dep.score * 0.15) +
(xds.score * 0.15))*100,2)
} else {
subminscores.lgsp <- gs.tiers %>%
filter(grepl('xds@', tier)) %>%
replace_na(list(slice_match_n = 0)) %>%
filter(slice_match_n < min_score_lgsp) %>%
select(tier)
overall.score <- round((
(chi.score * 0.4) +
(non.chi.score * 0.34) +
(xds.score * 0.2))*100,2)
}
subminscores <- bind_rows(subminscores.univ, subminscores.lgsp)
if(nrow(subminscores) > 0) {
submins <- subminscores$tier[1]
if (nrow(subminscores) > 1) {
for (row in 2:nrow(subminscores)) {
submins <- paste(submins,subminscores$tier[row], sep=", ")
}
}
summ.bad.tiers <- paste("Poor-performance tiers: ",submins, sep="")
} else {
summ.bad.tiers <- "Poor-performance tiers: <none! hooray!>"
}
summ.weighted.score <- paste("Weighted score: ", overall.score, "%", sep="")
if (overall.score >= min_overall_score &
nrow(subminscores) == 0) {
pass.message <- "Congratulations, you pass for this segment! Please pass this report on to your lab's PI."
} else {
pass.message <- "Unfortunately you didn't pass this segment. Please consult with your lab's PI."
}
# Notes on requirements
req.wscore <- paste("- An overall weighted score higher than ",
min_overall_score*100, "%", sep="")
req.tiers.univ <- paste("- At least ", min_score_univ*100,
"% accuracy on ALL speaker tiers and vcm@CHI", sep="")
if (native == "Yes") {
req.tiers.lgsp <- paste("- At least ", min_score_lgsp*100,
"% accuracy on ALL xds tiers, lex@CHI, and mwu@CHI (as applicable).", sep="")
} else {
req.tiers.lgsp <- paste("- At least ", min_score_lgsp*100,
"% accuracy on ALL xds tiers.", sep="")
}
# Prep error table for return
errors.tbl <- errors.tbl %>%
rename(Slice.Start = slice, GS = valA, You = valB, Tier = tier) %>%
select(-match)
# Rename speaker tier values for clarity
spkr.tier.errs <- which(nchar(errors.tbl$Tier) == 3)
errors.tbl$GS[spkr.tier.errs] <- ifelse(errors.tbl$GS[spkr.tier.errs] == 0,
"silence", "speech")
errors.tbl$You[spkr.tier.errs] <- ifelse(errors.tbl$You[spkr.tier.errs] == 0,
"silence", "speech")
tiers.w.spch
seg_stt <- (minute-1)*60000
seg_end <- minute*60000
# Match up the nw file tiers to the gold standard as closely as possible
gs.speakers <- gs.file %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
nw.speakers <- nw.file %>%
filter(stop > seg_stt & start < seg_end & !is.na(speaker)) %>%
distinct(speaker)
# Create a tier equivalence table: match based on speech on/off similarity
tier.equiv <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
gs.tiers <- gs.file %>%
filter(stop > seg_stt & start < seg_end & (!is.na(speaker))) %>%
select(tier, speaker) %>% distinct() %>% arrange(speaker) %>%
mutate(slice_match = "", n_annots = "", sec_annots = "",
slice_match_n = 0, nsec_spch = 0)
# CHI is always matched with CHI
tier.equiv$your.spkr[which(tier.equiv$gs.spkr == "CHI")] <- "CHI"
# The others are matched as a set...
nonchi.gs.s <- subset(gs.speakers, speaker != "CHI")$speaker
nonchi.nw.s <- subset(nw.speakers, speaker != "CHI")$speaker
gs.tier.perms <- permutations(n=length(nonchi.gs.s), r=length(nonchi.gs.s),
v=nonchi.gs.s,repeats.allowed=F)
# For each permutation of the non-CHI speakers in the GS,
# find the best set of non-CHI speakers in the coder's file
top.score <- 0
tier.equiv.temp <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
gs.tier.perms
tier.equiv.temp <- tibble(
gs.spkr = gs.speakers$speaker,
your.spkr = ""
)
tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == "CHI")] <- "CHI"
nonchi.gs.s.p <- gs.tier.perms[1,]
nonchi.nw.s.p <- nonchi.nw.s
nonchi.gs.s.p
nonchi.nw.s.p
nonchi.gs.s.p <- gs.tier.perms[3,]
nonchi.nw.s.p <- nonchi.nw.s
nonchi.nw.s.p
nonchi.gs.s.p
length(nonchi.gs.s.p) > 0
tier.equiv.temp
tier.equiv
tiers.w.spch
tier.equiv.temp <- tiers.w.spch
for (row in 1:nrow(tier.equiv.temp)) {
if (tier.equiv.temp$gs.spkr[row] != tier.equiv.temp$your.spkr[row]) {
nw.file.temp <- nw.file.temp %>% mutate(
speaker = gsub(tier.equiv.temp$your.spkr[row],
tier.equiv.temp$gs.spkr[row], speaker),
tier = gsub(tier.equiv.temp$your.spkr[row],
tier.equiv.temp$gs.spkr[row], tier))
}
}
errors.tbl.temp <- tibble()
gs.tiers.temp <- gs.file %>%
filter(stop > seg_stt & start < seg_end & (!is.na(speaker))) %>%
select(tier, speaker) %>% distinct() %>% arrange(speaker) %>%
mutate(slice_match = "", n_annots = "", sec_annots = "",
slice_match_n = 0, nsec_spch = 0)
gs.tiers.temp
tiertype <- gs.tiers.temp$tier[1]
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
tier.equiv.temp
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
segA
segB
!(grepl("@", tiertype))
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
View(gs.tiers.temp)
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
tiertype <- gs.tiers.temp$tier[2]
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
}
View(comparison.tbl)
tiertype <- gs.tiers.temp$tier[3]
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}}
tiertype <- gs.tiers.temp$tier[4]
tierspkr <- tiertype
(grepl("@", tiertype))
gs.row <- which(gs.tiers.temp$tier == tiertype)
tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>"
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
View(segA)
View(segB)
!(grepl("@", tiertype))
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
tiertype <- gs.tiers.temp$tier[5]
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
gs.tiers.temp$nsec_spch[gs.row] <- round(sum(segA$duration)/1000,2)
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
if (nrow(comparison.tbl) == 0) {
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
}
tiertype <- gs.tiers.temp$tier[6]
tierspkr <- tiertype
(grepl("@", tiertype))
gs.row <- which(gs.tiers.temp$tier == tiertype)
tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>"
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
segA
table(nw.file.temp$speaker)
tier.equiv.temp
nw.file.temp <- nw.file %>% filter(speaker %in%
tier.equiv.temp$your.spkr)
row <- 1
tier.equiv.temp$gs.spkr[row] != tier.equiv.temp$your.spkr[row]
row <- 2
tier.equiv.temp$gs.spkr[row] != tier.equiv.temp$your.spkr[row]
row <- 3
tier.equiv.temp$gs.spkr[row] != tier.equiv.temp$your.spkr[row]
nw.file.temp <- nw.file %>% filter(speaker %in%
tier.equiv.temp$your.spkr) %>%
mutate(speaker2 = speaker)
View(nw.file.temp)
tier.equiv.temp$gs.spkr[row]
tier.equiv.temp$your.spkr[row]
which(nw.file.temp$speaker == tier.equiv.temp$your.spkr[row])
length(which(nw.file.temp$speaker == tier.equiv.temp$your.spkr[row]))
toChange <- which(nw.file.temp$speaker2 ==
tier.equiv.temp$your.spkr[row])
toChange
nw.file.temp$speaker[toChange]
nw.file.temp$tier[toChange] <- tier.equiv.temp$gs.spkr[row]
nw.file.temp <- nw.file %>% filter(speaker %in%
tier.equiv.temp$your.spkr) %>%
mutate(speaker2 = speaker)
nw.file.temp <- nw.file %>% filter(speaker %in%
tier.equiv.temp$your.spkr) %>%
mutate(speaker2 = speaker)
toChange <- which(nw.file.temp$speaker2 ==
tier.equiv.temp$your.spkr[row])
toChange
nw.file.temp$speaker[toChange]
nw.file.temp$tier[toChange]
tier.equiv.temp$gs.spkr[row]
gsub(tier.equiv.temp$your.spkr[row],
tier.equiv.temp$gs.spkr[row], nw.file.temp$tier[toChange])
nw.file.temp$speaker[toChange] <- tier.equiv.temp$gs.spkr[row]
nw.file.temp$tier[toChange] <- gsub(tier.equiv.temp$your.spkr[row],
tier.equiv.temp$gs.spkr[row], nw.file.temp$tier[toChange])
View(subset(nw.file.temp, speaker != speaker2))
nw.file.temp <- nw.file %>%
filter(speaker %in% tier.equiv.temp$your.spkr) %>%
mutate(speaker2 = speaker)
for (row in 1:nrow(tier.equiv.temp)) {
if (tier.equiv.temp$gs.spkr[row] != tier.equiv.temp$your.spkr[row]) {
toChange <- which(nw.file.temp$speaker2 ==
tier.equiv.temp$your.spkr[row])
nw.file.temp$speaker[toChange] <- tier.equiv.temp$gs.spkr[row]
nw.file.temp$tier[toChange] <- gsub(tier.equiv.temp$your.spkr[row],
tier.equiv.temp$gs.spkr[row], nw.file.temp$tier[toChange])
}
}
table(nw.file.temp$speaker)
nw.file.temp$speaker2 <- NULL
shiny::runApp()
