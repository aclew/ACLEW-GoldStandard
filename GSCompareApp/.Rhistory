# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[3]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[4]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[5]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[6]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[7]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[8]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[9]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[10]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tiertype <- gs.tiers.temp$tier[11]
tiertype
tierspkr <- tiertype
if ((grepl("@", tiertype))) {
tierspkr <- substr(tiertype, 5, 7)
}
gs.row <- which(gs.tiers.temp$tier == tiertype)
if (tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>") {
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <- "MISSING"
gs.tiers.temp$sec_annots[gs.row] <- "MISSING"
}
gs.tiers.temp$slice_match[gs.row] <- "0%"
gs.tiers.temp$slice_match_n[gs.row] <- 0
} else {
# Fill in n_annots and sec_annots values
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
if (!(grepl("@", tiertype))) {
gs.tiers.temp$n_annots[gs.row] <-
paste("∆ = ",(nrow(segB)-nrow(segA)),
" (GS:",nrow(segA),", You:",nrow(segB),")", sep="")
gs.tiers.temp$sec_annots[gs.row] <-
paste("∆ = ",round((sum(segB$duration)/1000-sum(segA$duration)/1000),2),
" (GS:",round(sum(segA$duration)/1000,2),", You:",
round(sum(segB$duration)/1000,2),")", sep="")
}
# Fill in the slice_match value
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
gs.tiers.temp$slice_match[gs.row] <-
paste(round(mean(comparison.tbl$match)*100, 2),"%", sep="")
gs.tiers.temp$slice_match_n[gs.row] <- mean(comparison.tbl$match)
# Add slice match errors to the reporting table
errors.tbl.temp <- bind_rows(errors.tbl.temp,
lapply(subset(comparison.tbl, match == 0),
as.character))
}
tier.equiv.temp
gs.tiers.temp
tiertype <- gs.tiers.temp$tier[9]
tierspkr <- tiertype
tierspkr
(grepl("@", tiertype))
tierspkr <- substr(tiertype, 5, 7)
tierspkr
gs.row <- which(gs.tiers.temp$tier == tiertype)
gs.row
tier.equiv.temp$your.spkr[which(
tier.equiv.temp$gs.spkr == tierspkr)] == "<no match>"
segA <- gs.file %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- nw.file.temp %>%
filter(tier == tiertype & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
segA
segB
!(grepl("@", tiertype))
comparison.tbl <- intersect.tiers(gs.file, nw.file.temp,
tiertype, seg_stt, seg_end, strict, slice_sz)
comparison.tbl
annA <- gs.file
annB <- nw.file.temp
tiertype
seg_stt
seg_end
strict
slice_sz
grepl("@", tiertype)
spkr <- substr(tiertype, 5, 7)
ttyp <- substr(tiertype, 1, 3)
spkr
ttyp
segA <- annA %>%
filter(speaker == spkr & stop > seg_stt & start < seg_end) %>%
mutate(coder = "A")
segB <- annB %>%
filter(speaker == spkr & stop > seg_stt & start < seg_end) %>%
mutate(coder = "B")
segA
segB
segAB.spch <- bind_rows(segA, segB) %>% filter(tier == spkr)
segAB.dpdt <- bind_rows(segA, segB) %>% filter(tier == tiertype)
ttyp == "ort"
ABtbl <- tibble(
slice = seq(seg_stt, seg_end - slice_sz, slice_sz),
spchA = 0,
spchB = 0,
valA = "NA",
valB = "NA")
ABtbl
# Fill in speech-on/off values for each tier
if(nrow(segAB.spch) > 0) {
for (row in 1:nrow(segAB.spch)) {
startannot <- ifelse(segAB.spch$start[row] < seg_stt, seg_stt,
segAB.spch$start[row])
stopannot <- ifelse(segAB.spch$stop[row] > (seg_end - slice_sz),
(seg_end - slice_sz),
segAB.spch$stop[row])
if (segAB.spch$coder[row] == "A") {
ABtbl$spchA[max(which(ABtbl$slice <= startannot)):
(min(which(ABtbl$slice >= stopannot)))] <- 1
} else {
ABtbl$spchB[max(which(ABtbl$slice <= startannot)):
(min(which(ABtbl$slice >= stopannot)))] <- 1
}
}
}
ttyp != "ort"
ABtbl
if(nrow(segAB.dpdt) > 0) {
for (row in 1:nrow(segAB.dpdt)) {
startannot <- ifelse(segAB.dpdt$start[row] < seg_stt, seg_stt,
segAB.dpdt$start[row])
stopannot <- ifelse(segAB.dpdt$stop[row] > (seg_end - slice_sz),
(seg_end - slice_sz),
segAB.dpdt$stop[row])
valannot <- segAB.dpdt$code[row]
if (segAB.dpdt$coder[row] == "A") {
ABtbl$valA[max(which(ABtbl$slice <= startannot)):
(min(which(ABtbl$slice >= stopannot)))] <- valannot
} else {
ABtbl$valB[max(which(ABtbl$slice <= startannot)):
(min(which(ABtbl$slice >= stopannot)))] <- valannot
}
}
}
View(ABtbl)
ABtbl2 <- ABtbl %>%
filter(spchA == 1 & spchB == 1) %>%
mutate(match = as.numeric(valA == valB), tier = tiertype) %>%
select(-spchA, -spchB)
nrow(ABtbl2)
errors.tbl.temp
runApp()
